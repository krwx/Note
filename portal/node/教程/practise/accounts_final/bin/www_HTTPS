#!/usr/bin/env node

// 导入数据库操作
const db = require("../db/db");
const fs = require("fs");

// 启动数据库后再启动服务器
db(() => {
    var app = require('../app');
    var debug = require('debug')('accounts:server');
    var http = require('http');
    const https = require("https");

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '443');
    app.set('port', port);

    /**
     * 创建 HTTPS 服务器 
     *s
     */
    var server = https.createServer({
        key: fs.readFileSync('/etc/letsencrypt/path.to.privkey.pem'),
        cert: fs.readFileSync('/etc/letsencrypt/path.to.cert.pem'),
        ca: fs.readFileSync('/etc/letsencrypt/path.to.chain.pem')
    }, app);

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Create HTTP server.
     */

    var server2 = http.createServer(app);

    server2.listen(80);
    server2.on('error', onError);
    server2.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }

})